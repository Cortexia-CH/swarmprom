version: '3.7'

networks:
  net:
    driver: overlay
    attachable: true
    
configs:
  dockerd_config:
    file: ./dockerd-exporter/Caddyfile
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml

services:
  dockerd-exporter:
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile

  cadvisor:
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"

  alertmanager:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}"
        - "traefik.http.routers.alertmanager.entrypoints=websecure"
        - "traefik.http.routers.alertmanager.tls.certresolver=cloudflare"
        - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`)"

  unsee:
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}"
        - "traefik.http.routers.unsee.entrypoints=websecure"
        - "traefik.http.routers.unsee.tls.certresolver=cloudflare"
        - "traefik.http.routers.unsee.rule=Host(`unsee.${DOMAIN}`)"

  node-exporter:
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 128M
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}"
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
